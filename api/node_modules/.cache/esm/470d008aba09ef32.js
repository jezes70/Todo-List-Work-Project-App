let ApolloServer,jwt,typeDefs,resolvers,playground,connect,User,userLoader,Project,projectLoader,Task,taskLoader;_ba0‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_ba0‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_ba0‍.w("./schema",[["default",["typeDefs"],function(v){typeDefs=v}]]);_ba0‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_ba0‍.w("./playground",[["default",["playground"],function(v){playground=v}]]);_ba0‍.w("./lib/mongoose",[["default",["connect"],function(v){connect=v}]]);_ba0‍.w("./models",[["User",["User"],function(v){User=v}],["userLoader",["userLoader"],function(v){userLoader=v}],["Project",["Project"],function(v){Project=v}],["projectLoader",["projectLoader"],function(v){projectLoader=v}],["Task",["Task"],function(v){Task=v}],["taskLoader",["taskLoader"],function(v){taskLoader=v}]]);require("dotenv").config();
















(async () => {
  await connect();
})();

const getUser = async tokenWithBearer => {
  try {
    if (tokenWithBearer) {
      const token = tokenWithBearer.split(" ")[1];
      const tokenVerify = jwt.verify(token, process.env.JWT_SECRET);
      return await User.findOne({ _id: tokenVerify.userId });
    }
    return null;
  } catch (err) {
    return null;
  }
};

const isProduction = process.env.NODE_ENV === "production";

const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: async ({ req, res }) => {
    const tokenWithBearer = req ? req.headers.authorization : "";
    const user = await getUser(tokenWithBearer);

    return {
      user,
      models: { User, Project, Task },
      loaders: { userLoader, projectLoader, taskLoader },
      req,
      res,
    };
  },
  playground: !isProduction && playground,
});

server.listen().then(({ url }) => {
  console.log(`🚀  Server ready at ${url}`);
});
